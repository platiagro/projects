# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Projects - CI

on:
  push:
    branches:
    - master
    - v*-branch

  pull_request:
    branches:
    - master
    - v*-branch

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: platiagro
        ports:
        - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio123
        ports:
        - 9000:9000

    strategy:
      matrix:
        python-version: ["3.7"]

    steps:
    - name: Checkout üõéÔ∏è
      uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set output variables
      id: vars
      run: |
        CODE_REVIEW=$(cat ./CODE-REVIEW.md)
        echo ::set-output name=CODE_REVIEW::${CODE_REVIEW}

        VERSION=$(python -c "import projects; print(projects.__version__)")
        if [ ${{ github.ref }} = "refs/heads/master" ]; then
          echo ::set-output name=TAG::${VERSION}-SNAPSHOT
        elif [[ ${{ github.ref }} =~ ^refs/heads/v.*-branch$ ]]; then
          echo ::set-output name=TAG::${VERSION}
        else
          echo ::set-output name=TAG::${VERSION}-${{ github.sha }}
        fi

        echo ::set-output name=BRANCH::${{ github.ref }}
        echo ::set-output name=COMMIT::${{ github.sha }}

    - name: Code review tips
      uses: unsplash/comment-on-pr@master
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: ${{ steps.vars.outputs.CODE_REVIEW }}

    - name: start minikube
      id: minikube
      uses: medyagh/setup-minikube@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Kustomize / Helm
      run: |
        curl -sL "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    - name: Create Persistent Volumes
      run: |
        for I in `seq 1 10`; do
        cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: pv000${I}
          spec:
            accessModes:
              - ReadWriteOnce
            capacity:
              storage: 20Gi
            hostPath:
              path: /data/pv000${I}/
        EOF
        done

    - name: Create load balancer
      run: |
        kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.8.3/manifests/metallb.yaml
        MINIKUBE_IP=$(minikube ip)
        cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            namespace: metallb-system
            name: config
          data:
            config: |
              address-pools:
              - name: default
                protocol: layer2
                addresses:
                - ${MINIKUBE_IP}-${MINIKUBE_IP}
        EOF
        sleep 10
        kubectl -n metallb-system wait --for=condition=Ready pods --all --timeout=60s

    - name: Install Istio
      run: |
        curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.3.5 sh -
        cd istio-1.3.5
        for i in install/kubernetes/helm/istio-init/files/crd*yaml; do kubectl apply -f $i; done
        kubectl apply -f install/kubernetes/istio-demo.yaml

        kubectl create namespace kubeflow

        cat <<EOF | kubectl apply -f -
          apiVersion: networking.istio.io/v1alpha3
          kind: Gateway
          metadata:
            name: kubeflow-gateway
            namespace: kubeflow
          spec:
            selector:
              istio: ingressgateway # use istio default controller
            servers:
            - port:
                number: 80
                name: http
                protocol: HTTP
              hosts:
              - "*"
        EOF

    - name: Install JupyterLab
      run: |
        ./kustomize build "github.com/platiagro/manifests/jupyter/notebook-controller/base/?ref=$BRANCH" | kubectl apply -f -
        sleep 10
        kubectl -n kubeflow wait --for=condition=Ready pods --all --timeout=120s

        kubectl create namespace anonymous
        kubectl label namespace anonymous istio-injection=enabled

        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: vol-tasks
          namespace: anonymous
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
        EOF

        cat <<EOF | kubectl apply -f -
        apiVersion: kubeflow.org/v1
        kind: Notebook
        metadata:
          labels:
            add-nvidia-visible-devices: "true"
            app: server
          name: server
          namespace: anonymous
        spec:
          template:
            spec:
              containers:
              - env:
                - name: EXPERIMENT_ID
                  value: notebook
                - name: OPERATOR_ID
                  value: notebook
                image: jupyter/base-notebook
                name: server
                volumeMounts:
                - mountPath: /home/jovyan/tasks
                  name: vol-tasks
              volumes:
              - name: vol-tasks
                persistentVolumeClaim:
                  claimName: vol-tasks
        EOF

        sleep 120
        kubectl -n anonymous wait --for=condition=Ready pods --all --timeout=120s
      env:
        BRANCH: "v0.2.0-kubeflow-v1.2-branch"

    - name: Install Seldon Core
      run: |
        helm install seldon-core seldon-core-operator \
          --repo https://storage.googleapis.com/seldon-charts \
          --set usageMetrics.enabled=false \
          --namespace kubeflow \
          --version v1.4.0 \
          --set istio.enabled=true \
          --set istio.gateway=kubeflow/kubeflow-gateway

    - name: Install Kubeflow Pipelines
      id: kfp
      run: |
        kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=admin --user=kubelet --group=system:serviceaccounts
        # Need to do kustomize build (instead of kubectl apply -k) due to this error:
        # https://github.com/kubernetes-sigs/kustomize/issues/2205
        ./kustomize build "github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources/?ref=$BRANCH" | kubectl apply -f -
        kubectl wait crd/applications.app.k8s.io --for condition=established --timeout=60s
        ./kustomize build "github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic/?ref=$BRANCH" | kubectl apply -f -
        kubectl -n kubeflow wait --for=condition=Ready pods --all --timeout=240s
        kubectl -n kubeflow patch svc ml-pipeline --patch \
          '{ "spec": { "type": "NodePort", "ports": [ { "nodePort": 30000, "port": 8888, "protocol": "TCP", "targetPort": 8888 } ] } }'
        MINIKUBE_IP=$(minikube ip)
        echo ${MINIKUBE_IP}
        echo ::set-output name=MINIKUBE_IP::${MINIKUBE_IP}
      env:
        BRANCH: "1.2.0"

    - name: Install dependencies
      run: |
        python -m pip install --no-cache-dir --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir .
        pip install --no-cache-dir --force-reinstall "kubernetes==12.0.1"

    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        platiagro-init-db
        coverage erase
        coverage run --branch --source=projects -m pytest tests/test_api.py tests/test_comparisons.py tests/test_database.py tests/test_deployments_runs.py tests/test_deployments.py tests/test_experiments_runs.py tests/test_experiments.py tests/test_logs.py tests/test_monitorings.py tests/test_operators.py tests/test_parameters.py tests/test_tasks.py tests/test_templates.py
        coverage xml -i
      env:
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minio
        MINIO_SECRET_KEY: minio123
        MYSQL_DB_HOST: localhost
        MYSQL_DB_NAME: platiagro
        MYSQL_DB_USER: root
        JUPYTER_ENDPOINT: http://${{ steps.kfp.outputs.MINIKUBE_IP }}/notebook/anonymous/server
        KF_PIPELINES_ENDPOINT: http://${{ steps.kfp.outputs.MINIKUBE_IP }}:30000
        KF_PIPELINES_NAMESPACE: kubeflow
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        MAIL_SENDER_ADDRESS: ${{ secrets.MAIL_SENDER_ADDRESS }}
        MAIL_SERVER: ${{ secrets.MAIL_SERVER }}


    - name: Make disk space available for docker build
      if: ${{ always() }}
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: SonarCloud Scan
      if: ${{ always() }}
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push docker image (PROJECTS API) üì¶
      id: docker_build_api
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: docker.io/platiagro/projects:${{ steps.vars.outputs.TAG }}
        file: Dockerfile
        build-args: |
          COMMIT=${{ steps.vars.outputs.COMMIT }}
          BRANCH=${{ steps.vars.outputs.BRANCH }}

    - name: Image digest
      run: echo ${{ steps.docker_build_api.outputs.digest }}

    - name: Build and push docker image (PERSISTENCE AGENT) üì¶
      id: docker_build_agent
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: docker.io/platiagro/persistence-agent:${{ steps.vars.outputs.TAG }}
        file: Dockerfile.persistenceagent
        build-args: |
          COMMIT=${{ steps.vars.outputs.COMMIT }}
          BRANCH=${{ steps.vars.outputs.BRANCH }}

    - name: Image digest
      run: echo ${{ steps.docker_build_agent.outputs.digest }}
