# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master, v*-branch ]
  pull_request:
    branches: [ master, v*-branch ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: platiagro
        ports:
        - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Code review tips
      uses: unsplash/comment-on-pr@master
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: |
          ## Dicas para revisão de código

          ### Commits
          - Título (1a linha do commit): apresentar resumo do que foi alterado/adicionado/removido.
            ex: adiciona action que salva parametros no backend; exibe rótulo no componente de selecao de dataset;
          - Descrição (outras linhas): dar mais detalhes de cada alteração:
            - motivos das alterações
              ex: havia um bug que causava...; nova funcionalidade que faz isso...; código foi movido para...;
            - bibliotecas adicionadas e versões (requirements.txt)
              ex: atualiza para SQLAlchemy 1.3.20;
            - testes unitários criados/alterados
              ex: adiciona testes para a API PATCH /projects/{projectId}/experiments/{experimentId};
            - alterações do `swagger.yaml`
              ex: adiciona documentação para `GET /projects/{projectId}`
          - Mensagens auto-explicativas! Quem revisa o código deve entender o que foi feito (e porque foi feito) **sem perguntar para quem fez o commit**.
          - Não devem ter conflitos. Solicitar que sejam resolvidas as ocorrências de "This branch has conflicts that must be resolved".

          ### SonarCloud Quality Gate
          - Coverage > 80.0%, e sempre que possível = 100%
          - 0 Bugs, 0 Code Smells, 0 Vulnerabilities
          - São permitidos os seguintes Security Hotspots:
            - Make sure this permissive CORS policy is safe here.
            - Make sure publicly writable directories are used safely here.
            - Using http protocol is insecure. Use https instead.
            - Make sure disabling CSRF protection is safe here.

          ### Build Github actions COM SUCESSO

          ### Python
          - Usar Python>=3.7
          - Remover `print`.
          - Não deixar código-fonte comentado.
          - f-string `f'text-{variable}'` é melhor que `'text-{}'.format(variable)` e `'text-' + variable`
          - Métodos que são chamados de outros arquivos `.py` **DEVEM TER Docstring**.
          - Usar NumPy Style Python Docstring: https://www.sphinx-doc.org/en/master/usage/extensions/example_numpy.html
          - Usar sempre import absoluto.
            ex: from projects.database import Base (BOM), from .database import Base (RUIM)

          ### Padrão de URLs para API REST
          - Usar REST resource naming guide: https://restfulapi.net/resource-naming/
          - USE SUBSTANTIVOS! **NÃO USE VERBOS NA URL!**
            ex: `/projects/:projectId/executions` (BOM), `/project/execute` (RUIM)
          - **SUBSTANTIVOS SEMPRE NO PLURAL!**
            ex: `/deployments/:deploymentId` (BOM), `/deployment/:deploymentId` (RUIM)
          - **SUBSTANTIVOS SÃO SEMPRE SEPARADOS POR UM ID. NÃO USE DOIS SUBSTANTIVOS SEGUIDOS**
            ex: `/experiments/:experimentId/results` (BOM), `/experiments/results/:experimentId` (RUIM)
          - Para consultar uma lista de resources (paginada ou não):
            ex: `GET /resources?page=1&size=10&filter=...`
          - Para criar um resource (e gerar um resourceId aleatório):
            ex: `POST /resources`
          - Para acessar um resource por resourceId:
            ex: `GET /resources/{resourceId}`
          - Para substituir/criar (ou atualizar TODOS OS CAMPOS) de um resource com resourceId específico:
            ex: `PUT /resources/{resourceId}`
          - Para excluir um resource:
            ex: `DELETE /resources/{resourceId}`
          - Para atualizar alguns campos de um resource:
            ex: `PATCH /resources/{resourceId}`
          - Em dúvidas? Mantenha uma consistência com as URLs já existem.

    - name: start minikube
      id: minikube
      uses: medyagh/setup-minikube@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Kustomize / Helm
      run: |
        curl -sL "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

    - name: Create Persistent Volumes
      run: |
        cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: pv0001
          spec:
            accessModes:
              - ReadWriteOnce
            capacity:
              storage: 20Gi
            hostPath:
              path: /data/pv0001/
        EOF
        cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: pv0002
          spec:
            accessModes:
              - ReadWriteOnce
            capacity:
              storage: 20Gi
            hostPath:
              path: /data/pv0002/
        EOF

    - name: Install Seldon Core
      run: |
        kubectl create namespace kubeflow
        helm install seldon-core seldon-core-operator \
          --repo https://storage.googleapis.com/seldon-charts \
          --set usageMetrics.enabled=false \
          --namespace kubeflow \
          --version v1.4.0

    - name: Install Kubeflow Pipelines
      id: kfp
      run: |
        kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=admin --user=kubelet --group=system:serviceaccounts
        # Need to do kustomize build (instead of kubectl apply -k) due to this error:
        # https://github.com/kubernetes-sigs/kustomize/issues/2205
        ./kustomize build "github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources/?ref=$BRANCH" | kubectl apply -f -
        kubectl wait crd/applications.app.k8s.io --for condition=established --timeout=60s
        ./kustomize build "github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic/?ref=$BRANCH" | kubectl apply -f -
        kubectl -n kubeflow wait --for=condition=Ready pods --all --timeout=240s
        kubectl -n kubeflow patch svc ml-pipeline --patch \
          '{ "spec": { "type": "NodePort", "ports": [ { "nodePort": 30000, "port": 8888, "protocol": "TCP", "targetPort": 8888 } ] } }'
        MINIKUBE_IP=$(minikube ip)
        echo ${MINIKUBE_IP}
        echo ::set-output name=MINIKUBE_IP::${MINIKUBE_IP}
        curl -sSL ${MINIKUBE_IP}:30000/apis/v1beta1/runs
      env:
        BRANCH: "1.2.0"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install .

    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        platiagro-init-db
        coverage erase
        coverage run --branch --source=projects -m pytest tests/test_api.py tests/test_comparisons.py tests/test_database.py tests/test_logs.py tests/test_operators.py tests/test_templates.py
        coverage xml -i
      env:
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minio
        MINIO_SECRET_KEY: minio123
        MYSQL_DB_HOST: localhost
        MYSQL_DB_NAME: platiagro
        MYSQL_DB_USER: root
        JUPYTER_ENDPOINT: http://localhost:8888
        KF_PIPELINES_ENDPOINT: http://${{ steps.kfp.outputs.MINIKUBE_IP }}:30000
        KF_PIPELINES_NAMESPACE: kubeflow

    - name: SonarCloud Scan
      if: ${{ always() }}
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Set output variables
      if: ${{ always() }}
      id: vars
      run: |
        VERSION=$(python -c "import projects; print(projects.__version__)")
        if [ ${{ github.ref }} = "refs/heads/master" ]; then
          echo ::set-output name=TAG::${VERSION}-SNAPSHOT
        elif [[ ${{ github.ref }} =~ ^refs/heads/v.*-branch$ ]]; then
          echo ::set-output name=TAG::${VERSION}
        else
          echo ::set-output name=TAG::${VERSION}-${{ github.sha }}
        fi
        echo ::set-output name=BRANCH::${{ github.ref }}
        echo ::set-output name=COMMIT::${{ github.sha }}

    - name: Build and push image api
      if: ${{ always() }}
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: registry.hub.docker.com
        repository: platiagro/projects
        tags: ${{ steps.vars.outputs.TAG }}
        build_args: COMMIT=${{ steps.vars.outputs.COMMIT }},BRANCH=${{ steps.vars.outputs.BRANCH }}
        dockerfile: Dockerfile

    - name: Build and push image persistence-agent
      if: ${{ always() }}
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        registry: registry.hub.docker.com
        repository: platiagro/persistence-agent
        tags: ${{ steps.vars.outputs.TAG }}
        build_args: COMMIT=${{ steps.vars.outputs.COMMIT }},BRANCH=${{ steps.vars.outputs.BRANCH }}
        dockerfile: Dockerfile.persistenceagent
